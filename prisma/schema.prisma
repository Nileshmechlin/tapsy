// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                String   @id @default(uuid())
  email             String?  @unique
  mobileNumber      String?  @unique
  userType          UserType?
  UserName          String?
  otp               String?
  otpExpires        DateTime?
  otpVerified       Boolean  @default(false)
  tags              String[] @default([])
  lastCompletedStep Int      @default(0)
  status            UserStatus @default(ONBOARDING)

  refreshToken      String?
  lastLogin         DateTime?
  deviceId          String?

  businessDetails   BusinessDetails?
  businessDetailsId String? @unique

  locationType      LocationType?
  locationLat       Float?
  locationLng       Float?
  locationAddress   String?

  userPersonalizations UserPersonalization[] @relation("UserSelections")

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}



model BusinessDetails {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique

  companyName String
  website     String?
  about       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipcode     String?
  category    String?
  description String?
  email       String?    @unique
  mobile      String?    @unique
  logoUrl     String?
  videoUrl    String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPersonalization {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  screenType String
  sortOrder  Int
  status     Boolean  @default(true)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  selectedByUsers User[] @relation("UserSelections")
}


enum UserType {
  INDIVIDUAL
  BUSINESS
}

enum UserStatus {
  ONBOARDING
  VERIFIED
  BLOCKED
 }

 enum LocationType {
  HOME
  OFFICE
 }
